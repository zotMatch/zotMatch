{"version":3,"sources":["components/zotform.jsx","App.js","reportWebVitals.js","index.js"],"names":["CustomTextInput","label","props","useField","field","meta","htmlFor","id","name","className","touched","error","ZotForm","useState","submitted","setSubmitted","duplicate","normalizeName","first","last","toLowerCase","initialValues","firstName","lastName","email","major","studentOne","studentTwo","studentThree","validationSchema","Yup","required","onSubmit","values","setSubmitting","resetForm","setTimeout","a","likes","map","n","split","length","filter","like","uniqueLikes","Array","from","Set","payload","axios","post","class","type","placeholder","size","App","image","src","style","width","height","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0ae7133d.chunk.js","sourcesContent":["import \"../App.css\";\r\nimport React, { useState } from \"react\";\r\nimport { Form, Formik, useField, Field, ErrorMessage } from \"formik\";\r\nimport axios from 'axios';\r\nimport * as Yup from \"yup\";\r\n\r\nconst CustomTextInput = ({ label, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <input className=\"text-input\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nconst CustomDropDown = ({ label, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <select className=\"text-input\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default function ZotForm() {\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [duplicate, setDuplicate] = useState(false);\r\n\r\n  const normalizeName = (first,last) => {\r\n    return first.toLowerCase() + last.toLowerCase()\r\n  }\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        major: \"\",\r\n        studentOne: \"\",\r\n        studentTwo: \"\",\r\n        studentThree: \"\",\r\n      }}\r\n      validationSchema={Yup.object({\r\n        firstName: Yup.string().required(\"required\"),\r\n        lastName: Yup.string().required(\"required\"),\r\n        email: Yup.string().email(\"Invalid Email\").required(\"required\"),\r\n        major: Yup.string().required(\"required\"),\r\n        studentOne: Yup.string().required(\"required\"),\r\n        studentTwo: Yup.string(),\r\n        studentThree: Yup.string(),\r\n      })}\r\n      onSubmit={(values, { setSubmitting, resetForm\r\n       }) => {\r\n        setTimeout(async () => {\r\n          const id = normalizeName(values.firstName, values.lastName)\r\n          var likes = [values.studentOne, values.studentTwo, values.studentThree].map(name => {\r\n            const n = name.split(\" \")\r\n            const first = n[0]\r\n            const last = n.length > 1 ? n[1] : \"\"\r\n            const name_id = normalizeName(first,last)\r\n            return name_id\r\n          })\r\n          likes = likes.filter((like) => like !== id) // users cannot like themselves\r\n          const uniqueLikes = Array.from(new Set(likes))\r\n          const payload = {\r\n            id: id,\r\n            likes: uniqueLikes,\r\n            email: values.email,\r\n            name: values.firstName + \" \" + values.lastName,\r\n            major: values.major\r\n          }\r\n          // verify existing\r\n          /*\r\n          const foundUser = await axios.get(`https://ov7mtcvxm5.execute-api.us-east-1.amazonaws.com/dev/users/${payload.email}`)\r\n          console.log('Found',foundUser)\r\n          if (foundUser.data){\r\n            await axios.put(`https://ov7mtcvxm5.execute-api.us-east-1.amazonaws.com/dev/users/${payload.id}`, payload)\r\n            setDuplicate(true)\r\n            return\r\n          }\r\n          */\r\n          await axios.post('https://ov7mtcvxm5.execute-api.us-east-1.amazonaws.com/dev/users',payload)\r\n          resetForm();\r\n          setSubmitting(false);\r\n          setSubmitted(true);\r\n          await axios.post('https://ov7mtcvxm5.execute-api.us-east-1.amazonaws.com/dev/match', payload)\r\n        }, 500);\r\n      }}\r\n    >\r\n      {(props) => (\r\n        \r\n        <Form>\r\n          <div class=\"row\">\r\n            <div class=\"column input\">\r\n              <div class=\"label\">\r\n              first\r\n              </div>\r\n              <CustomTextInput\r\n              name=\"firstName\"\r\n              type=\"text\"\r\n              placeholder=\"peter\"\r\n              />\r\n            </div>\r\n            <div class=\"column input\">\r\n              <div class=\"label\">\r\n              last\r\n              </div>\r\n              <CustomTextInput\r\n              name=\"lastName\"\r\n              type=\"text\"\r\n              placeholder=\"anteater\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"column input\">\r\n              <div class=\"label\">\r\n              email\r\n              </div>\r\n              <CustomTextInput\r\n                  name=\"email\"\r\n                  type=\"email\"\r\n                  placeholder=\"anteater@uci.edu\"\r\n                  size=\"50\"\r\n                  />\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n      {/*\r\n            <div class=\"column input\">\r\n              <CustomDropDown name=\"year\">\r\n                <option value=\"\" disabled selected>year</option>\r\n                <option value=\"First Year\">freshman</option>\r\n                <option value=\"Second Year\">sophomore</option>\r\n                <option value=\"Third Year\">junior</option>\r\n                <option value=\"Fourth Year\">senior</option>\r\n                <option value=\"Other\">Other</option>\r\n              </CustomDropDown>\r\n            </div>\r\n      */}\r\n            <div class=\"column side\">\r\n              <div class=\"label\">\r\n              major\r\n              </div>\r\n              <CustomTextInput\r\n                  name=\"major\"\r\n                  type=\"text\"\r\n                  placeholder=\"wumbology\"\r\n                />\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"column input\">\r\n            <div class=\"label\">\r\n              enter full names\r\n              </div>\r\n              <CustomTextInput name=\"studentOne\" type=\"text\" placeholder=\"sarah anteater\" size=\"50\"/>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"column input\">\r\n              <CustomTextInput name=\"studentTwo\" type=\"text\" placeholder=\"oski bear\"size=\"50\"/>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"column input\">\r\n              <CustomTextInput name=\"studentThree\" type=\"text\" placeholder=\"sammy slug\" size=\"50\"/>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n          <div class=\"column side\"/>\r\n          <div class=\"column middle\">\r\n            <button type=\"submit\" class=\"button\">submit</button>\r\n          </div>\r\n          \r\n          </div>\r\n          {\r\n            duplicate ?\r\n            <div>\r\n              <p class=\"submitSuccess\">Your submission has been updated.</p>\r\n            </div>\r\n            :\r\n            \"\"\r\n          }\r\n          {\r\n            submitted ?\r\n              <div>\r\n                <p class=\"submitSuccess\">Thanks for your submission! 🎉\r\n                </p>\r\n                Please monitor your email for any potential matches. In the meantime, feel free to invite your friends to try our site!\r\n              </div>\r\n              :\r\n              \"\"\r\n          }\r\n        </Form>\r\n        \r\n      )}\r\n      \r\n    </Formik>\r\n    \r\n  );\r\n}\r\n","import \"./App.css\";\r\nimport React from \"react\";\r\nimport ZotForm from \"./components/zotform\";\r\nimport { render } from \"@testing-library/react\";\r\n\r\nconst App = () => {\r\n  const image = (\r\n    <img\r\n      src=\"https://zotmatch-assets.s3.amazonaws.com/logo.png\"\r\n      style={{ width: \"50%\", height: \"50%\" }}\r\n    />\r\n  );\r\n  return (\r\n    <div>\r\n      <div class=\"row\">\r\n        <div class=\"column side\">\r\n          {/*\r\n          <div class=\"row\">\r\n            <img\r\n              src=\"https://nakedsecurity.sophos.com/wp-content/uploads/sites/2/2017/01/mongodb.png?w=775\"\r\n              style={{ width: \"75%\", height: \"75%\" }}\r\n            />\r\n          </div>\r\n          <div class=\"row\">\r\n            <img\r\n              src=\"https://coryrylan.com/assets/images/posts/types/react.svg\"\r\n              style={{ width: \"30%\", height: \"30%\" }}\r\n            />\r\n          </div>\r\n          <img\r\n            src=\"https://images.squarespace-cdn.com/content/v1/51814c87e4b0c1fda9c1fc50/1528473310893-RH0HG7R5C0QURMFQJBSU/ke17ZwdGBToddI8pDm48kOyctPanBqSdf7WQMpY1FsRZw-zPPgdn4jUwVcJE1ZvWQUxwkmyExglNqGp0IvTJZUJFbgE-7XRK3dMEBRBhUpyD4IQ_uEhoqbBUjTJFcqKvko9JlUzuVmtjr1UPhOA5qkTLSJODyitRxw8OQt1oetw/600px-AWS_Lambda_logo.svg.png?format=500w\"\r\n            style={{ width: \"30%\", height: \"30%\" }}\r\n          />\r\n          */}\r\n        </div>\r\n\r\n        <div class=\"column middle\">\r\n          <div class=\"box\">\r\n            {image}\r\n            <h1>ZotMatch 💙 💛</h1>\r\n            <p class=\"desc\">\r\n              hi there! we built this app to help anteaters find love or\r\n              friendship during quarantine. enter the full names of 3 uci\r\n              students you'd like to get to know better, and if they like you\r\n              back you'll be matched via email! good luck and shoot your zot! 🥺\r\n            </p>\r\n            <ZotForm />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"footer\">\r\n        Made with ❤️ in Irvine, CA |{\" \"}\r\n        <a href=\"https://zotmatch-assets.s3.amazonaws.com/about.html\">About</a>\r\n        {\" | \"}\r\n        <a href=\"https://zotmatch-assets.s3.amazonaws.com/privacy.html\">\r\n          Privacy Policy\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}